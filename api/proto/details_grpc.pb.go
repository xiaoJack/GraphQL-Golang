// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.2
// source: details.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetailsClient is the client API for Details service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetailsClient interface {
	Get(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*Detail, error)
	Add(ctx context.Context, in *Detail, opts ...grpc.CallOption) (*Detail, error)
}

type detailsClient struct {
	cc grpc.ClientConnInterface
}

func NewDetailsClient(cc grpc.ClientConnInterface) DetailsClient {
	return &detailsClient{cc}
}

func (c *detailsClient) Get(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*Detail, error) {
	out := new(Detail)
	err := c.cc.Invoke(ctx, "/Details/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailsClient) Add(ctx context.Context, in *Detail, opts ...grpc.CallOption) (*Detail, error) {
	out := new(Detail)
	err := c.cc.Invoke(ctx, "/Details/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetailsServer is the server API for Details service.
// All implementations should embed UnimplementedDetailsServer
// for forward compatibility
type DetailsServer interface {
	Get(context.Context, *GetDetailRequest) (*Detail, error)
	Add(context.Context, *Detail) (*Detail, error)
}

// UnimplementedDetailsServer should be embedded to have forward compatible implementations.
type UnimplementedDetailsServer struct {
}

func (UnimplementedDetailsServer) Get(context.Context, *GetDetailRequest) (*Detail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDetailsServer) Add(context.Context, *Detail) (*Detail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}

// UnsafeDetailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetailsServer will
// result in compilation errors.
type UnsafeDetailsServer interface {
	mustEmbedUnimplementedDetailsServer()
}

func RegisterDetailsServer(s grpc.ServiceRegistrar, srv DetailsServer) {
	s.RegisterService(&Details_ServiceDesc, srv)
}

func _Details_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Details/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailsServer).Get(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Details_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Detail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Details/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailsServer).Add(ctx, req.(*Detail))
	}
	return interceptor(ctx, in, info, handler)
}

// Details_ServiceDesc is the grpc.ServiceDesc for Details service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Details_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Details",
	HandlerType: (*DetailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Details_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Details_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "details.proto",
}
